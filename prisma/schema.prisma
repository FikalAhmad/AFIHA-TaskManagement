datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  task          Task[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subtask     Subtask[]
  taskList        TaskList[]

  @@map("tasks")
}

model Subtask {
  id          String @id @default(cuid())
  title       String
  description String
  task        Task   @relation(fields: [taskId], references: [id])
  taskId      String

  @@map("subtasks")
}

model List {
  id      String @id @default(cuid())
  name    String
  color   String
  taskList    TaskList[]

  @@map("lists")
}

model TaskList {
  taskId  String      
  listId  String      
  
  task    Task        @relation(fields: [taskId], references: [id])
  list    List        @relation(fields: [listId], references: [id])

  @@id([taskId, listId])
  @@map("tasklist")
}
