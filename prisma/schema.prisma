generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  list          List[]
  sessions      Session[]
  task          Task[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  userId      String
  subtask     Subtask[]
  list        TaskList[]
  user        User       @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model Subtask {
  id          String @id @default(cuid())
  title       String
  taskId      String
  task        Task   @relation(fields: [taskId], references: [id])

  @@map("subtasks")
}

model List {
  id     String     @id @default(cuid())
  name   String
  color  String
  userId String
  task   TaskList[]
  user   User       @relation(fields: [userId], references: [id])

  @@map("lists")
}

model TaskList {
  taskId String
  listId String
  list   List   @relation(fields: [listId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])

  @@id([taskId, listId])
  @@map("tasklist")
}
